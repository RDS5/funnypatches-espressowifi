diff --git a/services/surfaceflinger/Android.mk b/services/surfaceflinger/Android.mk
index fab37951d..1cab108f8 100644
--- a/services/surfaceflinger/Android.mk
+++ b/services/surfaceflinger/Android.mk
@@ -58,6 +58,10 @@ else
     LOCAL_SRC_FILES += \
         SurfaceFlinger_hwc1.cpp \
         DisplayHardware/HWComposer_hwc1.cpp
+
+    ifeq ($(OMAP_ENHANCEMENT),true)
+        LOCAL_CFLAGS += -DOMAP_ENHANCEMENT
+    endif
 endif
 
 LOCAL_CFLAGS += -fvisibility=hidden -Werror=format
diff --git a/services/surfaceflinger/DisplayHardware/HWComposer_hwc1.cpp b/services/surfaceflinger/DisplayHardware/HWComposer_hwc1.cpp
index dcb29135b..2489fb6a2 100644
--- a/services/surfaceflinger/DisplayHardware/HWComposer_hwc1.cpp
+++ b/services/surfaceflinger/DisplayHardware/HWComposer_hwc1.cpp
@@ -111,6 +111,10 @@ HWComposer::HWComposer(
     int fberr = loadFbHalModule();
     loadHwcModule();
 
+#ifdef OMAP_ENHANCEMENT
+    // FB HAL must stay open independent of HWC API version. Closing FB HAL will
+    // result in destruction of flip chain and de-allocation of framebuffer.
+#else
     if (mFbDev && mHwc && hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1)) {
         // close FB HAL if we don't needed it.
         // FIXME: this is temporary until we're not forced to open FB HAL
@@ -118,6 +122,7 @@ HWComposer::HWComposer(
         framebuffer_close(mFbDev);
         mFbDev = NULL;
     }
+#endif
 
     // If we have no HWC, or a pre-1.1 HWC, an FB dev is mandatory.
     if ((!mHwc || !hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1))
@@ -166,7 +171,11 @@ HWComposer::HWComposer(
         }
     }
 
+#ifdef OMAP_ENHANCEMENT
+    if (!mHwc || !hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1)) {
+#else
     if (mFbDev) {
+#endif
         ALOG_ASSERT(!(mHwc && hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1)),
                 "should only have fbdev if no hwc or hwc is 1.0");
 
@@ -424,7 +433,12 @@ status_t HWComposer::queryDisplayProperties(int disp) {
     }
 
     // FIXME: what should we set the format to?
+#ifdef OMAP_ENHANCEMENT
+    // Use pixel format native to DSS HW
+    mDisplayData[disp].format = HAL_PIXEL_FORMAT_BGRA_8888;
+#else
     mDisplayData[disp].format = HAL_PIXEL_FORMAT_RGBA_8888;
+#endif
     mDisplayData[disp].connected = true;
     return NO_ERROR;
 }
@@ -853,7 +867,12 @@ int HWComposer::getVisualID() const {
         // FIXME: temporary hack until HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED
         // is supported by the implementation. we can only be in this case
         // if we have HWC 1.1
+#ifdef OMAP_ENHANCEMENT
+        // Use pixel format native to DSS HW
+        return HAL_PIXEL_FORMAT_BGRA_8888;
+#else
         return HAL_PIXEL_FORMAT_RGBA_8888;
+#endif
         //return HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED;
     } else {
         return mFbDev->format;
